import { Translations } from "@orbs-network/twap-ui";
import { useMemo } from "react";
import { useAdapterContext } from "./context";

export const useTranslation = () => {
  const { t } = useAdapterContext();

  return useMemo((): Partial<Translations> => {
    if (!t) return {} as Partial<Translations>;
    return {
      expirationTooltip: t("twap_expirationTooltip"),
      tradeIntervalTooltip: t("twap_tradeIntervalTooltip"),
      chunkSizeTooltip: t("twap_chunkSizeTooltip"),
      totalTradesTooltip: t("twap_totalTradesTooltip"),
      minDstAmountTooltipMarket: t("twap_minDstAmountTooltipMarket"),
      minDstAmountTooltipLimit: t("twap_minDstAmountTooltipLimit"),
      limitPriceTooltip: t("twap_limitPriceTooltip"),
      sizePerTradeTooltip: t("twap_sizePerTradeTooltip"),
      maxDurationTooltip: t("twap_maxDurationTooltip"),
      tradeIntervalTootlip: t("twap_tradeIntervalTootlip"),
      sliderMinSizeTooltip: t("twap_sliderMinSizeTooltip"),
      connect: t("twap_connect"),
      selectTokens: t("twap_selectTokens"),
      disclaimer: t("twap_disclaimer"),
      days: t("twap_days"),
      hours: t("twap_hours"),
      minutes: t("twap_minutes"),
      seconds: t("twap_seconds"),
      hrs: t("twap_hrs"),
      mins: t("twap_mins"),
      switchNetwork: t("twap_switchNetwork"),
      wrap: t("twap_wrap"),
      unwrap: t("twap_unwrap"),
      approve: t("twap_approve"),
      placeOrder: t("twap_placeOrder"),
      confirmOrder: t("twap_confirmOrder"),
      enterAmount: t("twap_enterAmount"),
      insufficientFunds: t("twap_insufficientFunds"),
      enterTradeSize: t("twap_enterTradeSize"),
      enterMaxDuration: t("twap_enterMaxDuration"),
      enterTradeInterval: t("twap_enterTradeInterval"),
      tradeSizeMustBeEqual: t("twap_tradeSizeMustBeEqual"),
      sizePerTrade: t("twap_sizePerTrade"),
      tradeInterval: t("twap_tradeInterval"),
      maxDuration: t("twap_maxDuration"),
      totalTrades: t("twap_totalTrades"),
      cancelOrder: t("twap_cancelOrder"),
      marketOrder: t("twap_marketOrder"),
      limitOrder: t("twap_limitOrder"),
      limitPrice: t("twap_limitPrice"),
      marketPrice: t("twap_marketPrice"),
      currentMarketPrice: t("twap_currentMarketPrice"),
      from: t("twap_from"),
      to: t("twap_to"),
      orders: t("twap_orders"),
      confirmTx: t("twap_confirmTx"),
      expiration: t("twap_expiration"),
      orderType: t("twap_orderType"),
      minReceivedPerTrade: t("twap_minReceivedPerTrade"),
      ordersTooltip: t("twap_ordersTooltip"),
      poweredBy: t("twap_poweredBy"),
      balance: t("twap_balance"),
      selectToken: t("twap_selectToken"),
      partialFillWarning: t("twap_partialFillWarning"),
      tradeIntervalWarning: t("twap_tradeIntervalWarning"),
      limitPriceMessage: t("twap_limitPriceMessage"),
      hideCancelledOrders: t("twap_hideCancelledOrders"),
      openOrders: t("twap_openOrders"),
      orderHistory: t("twap_orderHistory"),
      hide: t("twap_hide"),
      canceled: t("twap_canceled"),
      completed: t("twap_completed"),
      expired: t("twap_expired"),
      open: t("twap_open"),
      setMarketRate: t("twap_setMarketRate"),
      noOpenOrders: t("twap_noOpenOrders"),
      noOrderHistory: t("twap_noOrderHistory"),
      sellAtRate: t("twap_sellAtRate"),
      status: t("twap_status"),
      viewOnExplorer: t("twap_viewOnExplorer"),
      orderId: t("twap_orderId"),
      price: t("twap_price"),
      fee: t("twap_fee"),
      expiry: t("twap_expiry"),
      filled: t("twap_filled"),
      feeTooltip: t("twap_feeTooltip"),
      gain: t("twap_gain"),
      insufficientLiquidity: t("twap_insufficientLiquidity"),
      searchingForBestPrice: t("twap_searchingForBestPrice"),
      placeLimitOrder: t("twap_placeLimitOrder"),
      placeTWAPOrder: t("twap_placeTWAPOrder"),
      limitPriceWarning: t("twap_limitPriceWarning"),
      orderCancelled: t("twap_orderCancelled"),
      orderCancelledMessage: t("twap_orderCancelledMessage"),
      pleaseApproveItInYourWallet: t("twap_pleaseApproveItInYourWallet"),
      confirmPlacing: t("twap_confirmPlacing"),
      limitOrderPlaced: t("twap_limitOrderPlaced"),
      twapOrderPlaced: t("twap_twapOrderPlaced"),
      orderSubmitted: t("twap_orderSubmitted"),
      transactionRejected: t("twap_transactionRejected"),
      transactionFailed: t("twap_transactionFailed"),
      insufficientBalance: t("twap_insufficientBalance"),
      insufficientBalanceMessage: t("twap_insufficientBalanceMessage"),
      errorMessage: t("twap_errorMessage"),
      wrappingError: t("twap_wrappingError"),
      approvingError: t("twap_approvingError"),
      orderPlacingError: t("twap_orderPlacingError"),
      transactionSubmissionWentWrong: t("twap_transactionSubmissionWentWrong"),
      canceledApproval: t("twap_canceledApproval"),
      canceledWrapping: t("twap_canceledWrapping"),
      canceledOrderPlacing: t("twap_canceledOrderPlacing"),
      canceledApprovalMessage: t("twap_canceledApprovalMessage"),
      canceledWrappingMessage: t("twap_canceledWrappingMessage"),
      canceledOrderPlacingMessage: t("twap_canceledOrderPlacingMessage"),
      canceledTransaction: t("twap_canceledTransaction"),
      canceledTransactionMessage: t("twap_canceledTransactionMessage"),
      twap: t("twap_twap"),
      limit: t("twap_limit"),
      loading: t("twap_loading"),
      confirm: t("twap_confirm"),
      srcTokenForDstToken: t("twap_srcTokenForDstToken"),
    };
  }, [t]);
};
